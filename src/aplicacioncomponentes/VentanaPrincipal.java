package aplicacioncomponentes;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
import static aplicacioncomponentes.Login.con1;
import com.formdev.flatlaf.*;
import com.formdev.flatlaf.intellijthemes.FlatCyanLightIJTheme;
import com.formdev.flatlaf.intellijthemes.FlatDarkPurpleIJTheme;
import com.formdev.flatlaf.intellijthemes.FlatGradiantoDeepOceanIJTheme;
import com.formdev.flatlaf.intellijthemes.FlatNordIJTheme;
import com.formdev.flatlaf.intellijthemes.FlatSolarizedDarkIJTheme;
import com.formdev.flatlaf.intellijthemes.FlatSolarizedLightIJTheme;
import java.awt.BorderLayout;
import java.awt.Desktop;
import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

import java.net.URL;
import java.sql.*;
import java.util.Enumeration;
import javax.help.HelpBroker;
import javax.help.HelpSet;
import javax.help.HelpSetException;
import javax.help.JHelp;

import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.plaf.FontUIResource;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableRowSorter;
/**
 *
 * @author samuel
 */
public class VentanaPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form VentanaPrincipal
     */
    
    
    private MouseListener mouseClickListener = null;
    private MouseListener mouseOrdenarTabla = null;
    private int codigoProducto = -1;
    public static Connection con = con1;
   
    
    public VentanaPrincipal() {
        initComponents();
        cerrarBaseDeDatos();
         URL imageLogoURL = getClass().getResource("/recursos/logo.png");
        ImageIcon logoIcon = new ImageIcon(imageLogoURL);
        setIconImage(logoIcon.getImage());
        FlatNordIJTheme.setup();
        FlatLaf.updateUI();
        
        cargarTablaBuscar();
        PanelBuscarProveedor pb = new PanelBuscarProveedor(this);
        panelAcciones.setLayout(new BorderLayout());
        panelAcciones.add(pb, BorderLayout.CENTER);
        panelAcciones.add(pb);
        panelAcciones.revalidate();
        panelAcciones.repaint();
        //Me salia un cuadrado azul al dejar el raton encima de una celda. Solucion:
        tablaBusqueda.setToolTipText(null);
        
        String AYUDA_HS = "aplicacioncomponentes/conayuda/ayuda/helpset.hs"; 
        try {
         ClassLoader cl = getClass().getClassLoader();
         HelpSet helpset = new HelpSet(cl, cl.getResource(AYUDA_HS));
         HelpBroker hb = helpset.createHelpBroker();
         JHelp jhelp = new JHelp(helpset);
         //jhelp.setCurrentID("primero");
         hb.enableHelpOnButton(menuVerAyuda, "primero", helpset);

        } catch (HelpSetException ex) {
         System.err.println("Error al cargar la ayuda: " + ex);
         ex.printStackTrace();
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    public void cerrarBaseDeDatos(){
        
        
        
        // Cerrar la conexión al cerrar la ventana
        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                try {
                    con.close();
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
            }
        });
        
        
    }
    
    
    public void cargarTablaBuscar(){
        //Mostrar tabla empleados completa
        quitarListener();
        ResultSet resul = null;
        Statement stmt;
        
        String sql = "SELECT P.NOMBRE AS NombreProveedor,P.NOMCONTACTO AS NombreContacto,P.TELEFONO,P.EMAILCONTACTO,M.NOMBRE AS NombreMunicipio,"
                + "PA.NOMBRE AS NombrePais FROM PROVEEDORES P LEFT JOIN MUNICIPIOS M ON P.CODIGOMUNICIPIO=M.CODIGO LEFT JOIN PAISES PA ON P.CODIGOPAIS=PA.CODIGO";
        
        tablaBusqueda.setModel(new DefaultTableModel(
        new Object[][]{},
        new Object[]{
            
        }
        ));
        try {
            stmt = con.createStatement();
            resul = stmt.executeQuery(sql);
            
            //----------------------Configurar imagen para las columnas de detalles, eliminar y modificar ------------------------------
            //Estas lineas para las imagenes estan en varios metodos. Es lo mejor, porque si se hace en un metodo aparte, el programa tarda en cargar.
            
            
            URL imageEliminarURL = getClass().getResource("/recursos/eliminar.png");
            ImageIcon eliminarIcon = new ImageIcon(imageEliminarURL);
            //Ajustar tamaño de la imagen para la celda
            ImageIcon eliminarIconEscalado = new ImageIcon(eliminarIcon.getImage().getScaledInstance(23, 23, java.awt.Image.SCALE_SMOOTH));

            URL imageModificarURL = getClass().getResource("/recursos/modificar.png");
            ImageIcon modificarIcon = new ImageIcon(imageModificarURL);
            //Ajustar tamaño de la imagen para la celda
            ImageIcon modificarIconEscalado = new ImageIcon(modificarIcon.getImage().getScaledInstance(23, 23, java.awt.Image.SCALE_SMOOTH));
            
            //--------------------------------------------------------------------------------------------------------------------------
            
            ResultSetMetaData metaData = resul.getMetaData();
            int columnCount = metaData.getColumnCount();
            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false; // Hace que todas las celdas no sean editables
                }
            
                @Override
                public Class<?> getColumnClass(int columnIndex) {
                    // Asegura que las 3 últimas columnas se traten como ImageIcon
                    int lastColumnIndex = getColumnCount() - 1;
                    int penultimateColumnIndex = getColumnCount() - 2;

                    if (columnIndex == penultimateColumnIndex || columnIndex == lastColumnIndex) {
                        return ImageIcon.class;
                    }

                    return super.getColumnClass(columnIndex);
                }
            };
            model.setColumnIdentifiers(new Object[]{"Proveedor", "Nombre contacto", "Teléfono", "Email", "Municipio", "País", "Eliminar", "Modificar"});
            model.setColumnCount(columnCount+2);
            while (resul.next()) {
                Object[] rowData = new Object[columnCount +2];
                for (int i = 0; i < columnCount; i++) {
                    rowData[i] = resul.getObject(i + 1);
                }  
                //Añadir columnas de imagenes(detalles, eliminar, modificar) a la fila
                rowData[columnCount+1] = modificarIconEscalado;
                rowData[columnCount] = eliminarIconEscalado;
                model.addRow(rowData);
            }
            
                mouseListenerColumnasExtra();
            tablaBusqueda.setRowHeight(26);
            tablaBusqueda.setModel(model);
            activarOrdenarColumnas(model);
            
            TableColumnModel columnModel = tablaBusqueda.getColumnModel();
        } catch (SQLException ex) {
            ex.getMessage();
        } 
    }
    
    public void quitarListener(){
        tablaBusqueda.removeMouseListener(mouseClickListener);
        mouseClickListener = null;
    }
    
    public void activarOrdenarColumnas(DefaultTableModel model){
        tablaBusqueda.removeMouseListener(mouseOrdenarTabla);
        mouseOrdenarTabla = null;
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
        tablaBusqueda.setRowSorter(sorter);
        mouseOrdenarTabla = new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent evt) {
                        int columnaSeleccionada = tablaBusqueda.columnAtPoint(evt.getPoint());
                    sorter.toggleSortOrder(columnaSeleccionada);
            }
        };
    }
    
    public void cargarTablaAnadir() {
        // Quito el listener que uso para darle a detalles, modificar y eliminar para que no interfiera con la tabla de añadir. 
        // Además de esta manera  soluciono el problema de que se acumulen los listeners cada vez que llamo al metodo mouseListenerColumnasExtra.
        tablaBusqueda.removeMouseListener(mouseClickListener);
        mouseClickListener = null;
        
        try {
            String sql = "SELECT P.NOMBRE AS NombreProveedor,P.NOMCONTACTO AS NombreContacto,P.TELEFONO,P.EMAILCONTACTO,M.NOMBRE AS NombreMunicipio,"
                + "PA.NOMBRE AS NombrePais FROM PROVEEDORES P LEFT JOIN MUNICIPIOS M ON P.CODIGOMUNICIPIO=M.CODIGO LEFT JOIN PAISES PA ON P.CODIGOPAIS=PA.CODIGO";

            ResultSet resul = null;
            Statement stmt = null;

            stmt = con.createStatement();
            resul = stmt.executeQuery(sql);

            ResultSetMetaData metaData = resul.getMetaData();
            int columnCount = metaData.getColumnCount();

            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false; // Hace que todas las celdas no sean editables
                }
            };

            model.setColumnIdentifiers(new Object[]{"Proveedor", "Contacto", "Teléfono", "Email", "Municipio", "País"});

            while (resul.next()) {
                Object[] rowData = new Object[columnCount];
                for (int i = 1; i <= columnCount; i++) {
                    rowData[i - 1] = resul.getObject(i);
                }
                model.addRow(rowData);
            }

            tablaBusqueda.setModel(model);
            activarOrdenarColumnas(model);
            /*TableColumnModel columnModel = tablaBusqueda.getColumnModel();
            columnModel.getColumn(0).setPreferredWidth(100);
            columnModel.getColumn(1).setPreferredWidth(60);
            columnModel.getColumn(2).setPreferredWidth(30);
            columnModel.getColumn(8).setPreferredWidth(60);
            columnModel.getColumn(9).setPreferredWidth(130);*/

        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
    
    public boolean buscarProducto(int codigoPais, int codigoCategoria, int codigoProveedor){
        tablaBusqueda.removeMouseListener(mouseClickListener);
        mouseClickListener = null;
        boolean resultadosEncontrados = false;
        try {
            
            
            System.out.println("CODIGO PAIS " + codigoPais + " CODIGO GATEGORIA " + codigoCategoria + " CODIGO PROVEEDOR " + codigoProveedor + "xd" );
            String sql = "SELECT productos.nombre AS nombre_producto, " +
                    "paises.nombre AS pais, " +
                    "proveedores.nombre AS proveedor, " +
                    "categorias.nombre AS categoria, " +
                    "productos.preciouni AS precio_unidad, " +
                    "productos.unidexist AS unidades_existencia " +
                    "FROM productos " +
                    "JOIN proveedores ON productos.codprov = proveedores.codigo " +
                    "JOIN categorias ON productos.codcateg = categorias.codigo " +
                    "JOIN paises ON proveedores.codigopais = paises.codigo WHERE 1=1";
            
            // Verificar si los campos están vacíos
            if (codigoPais != -1) {
                sql += " AND proveedores.codigopais = " + codigoPais; // Corregir el nombre de la tabla y columna
            }
            
            if (codigoCategoria != -1) {
                sql += " AND productos.codcateg = " + codigoCategoria; // Corregir el nombre de la tabla y columna
            }
            
            if (codigoProveedor != -1) {
                sql += " AND proveedores.codigo = " + codigoProveedor; // Corregir el nombre de la tabla y columna
            }
            System.out.println(sql);
            ResultSet resul = null;
            Statement stmt = null;

            stmt = con.createStatement();
            resul = stmt.executeQuery(sql);

            ResultSetMetaData metaData = resul.getMetaData();
            int columnCount = metaData.getColumnCount();

            DefaultTableModel model = new DefaultTableModel();

            model.setColumnIdentifiers(new Object[]{"Producto", "País", "Proveedor", "Categoria", "Precio unidad", "Existencias"});

            while (resul.next()) {
                resultadosEncontrados = true;
                Object[] rowData = new Object[columnCount];
                for (int i = 1; i <= columnCount; i++) { // Comenzando desde 1
                    
                    rowData[i - 1] = resul.getObject(i); // Usando i directamente
                }
                model.addRow(rowData);
            }
            tablaBusqueda.setModel(model);
            activarOrdenarColumnas(model);
        } catch (SQLException ex) {
            ex.printStackTrace();}   
        return resultadosEncontrados;
    }
    
    public int cargarListenerTablaProductos(){
        
        tablaBusqueda.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    int filaSeleccionada = tablaBusqueda.getSelectedRow();
                    if (filaSeleccionada != -1) { // Verifica si se ha seleccionado una fila
                        Object nombre = tablaBusqueda.getValueAt(filaSeleccionada, 0);
                        Object existencias = tablaBusqueda.getValueAt(filaSeleccionada, 5);
                         // Realizar consulta SQL para obtener el código del producto
                        try {
                            String sql = "SELECT CODIGO FROM PRODUCTOS WHERE NOMBRE = ? AND UNIDEXIST = ?";
                            PreparedStatement statement = con.prepareStatement(sql);
                            statement.setString(1, nombre.toString());
                            statement.setInt(2, (int) existencias);
                            ResultSet resultSet = statement.executeQuery();

                            if (resultSet.next()) {
                                codigoProducto = resultSet.getInt("CODIGO");
                            }

                            resultSet.close();
                            statement.close();
                        } catch (SQLException ex) {
                            ex.printStackTrace();
                        }
                    }
                }
            }
        });
        return codigoProducto;
    }
    
    public void cargarTablaProductos() {
        // Quito el listener que uso para darle a detalles, modificar y eliminar para que no interfiera con la tabla de añadir. 
        // Además de esta manera  soluciono el problema de que se acumulen los listeners cada vez que llamo al metodo mouseListenerColumnasExtra.
        tablaBusqueda.removeMouseListener(mouseClickListener);
        mouseClickListener = null;
        
        try {
            String sql = "SELECT productos.nombre AS nombre_producto, " +
                             "paises.nombre AS pais, " +
                             "proveedores.nombre AS proveedor, " +
                             "categorias.nombre AS categoria, " +
                             "productos.preciouni AS precio_unidad, " +
                             "productos.unidexist AS unidades_existencia " +
                             "FROM productos " +
                             "JOIN proveedores ON productos.codprov = proveedores.codigo " +
                             "JOIN categorias ON productos.codcateg = categorias.codigo " +
                             "JOIN paises ON proveedores.codigopais = paises.codigo";

            ResultSet resul = null;
            Statement stmt = null;

            stmt = con.createStatement();
            resul = stmt.executeQuery(sql);

            ResultSetMetaData metaData = resul.getMetaData();
            int columnCount = metaData.getColumnCount();

            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false; // Hace que todas las celdas no sean editables
                }
            };

            model.setColumnIdentifiers(new Object[]{"Producto", "País", "Proveedor", "Categoria", "Precio unidad", "Existencias"});

            while (resul.next()) {
                Object[] rowData = new Object[columnCount];
                for (int i = 1; i <= columnCount; i++) {
                    rowData[i - 1] = resul.getObject(i);
                }
                model.addRow(rowData);
            }

            tablaBusqueda.setModel(model);
            activarOrdenarColumnas(model);
            /*TableColumnModel columnModel = tablaBusqueda.getColumnModel();
            columnModel.getColumn(0).setPreferredWidth(100);
            columnModel.getColumn(1).setPreferredWidth(60);
            columnModel.getColumn(2).setPreferredWidth(30);
            columnModel.getColumn(8).setPreferredWidth(60);
            columnModel.getColumn(9).setPreferredWidth(130);*/

        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
    
    
    public void mouseListenerColumnasExtra(){
      
        mouseClickListener= new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent evt) {
               Statement stmt = null;
                try {
                    stmt = con.createStatement();
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
               ResultSet resul = null;


                 String sql = "SELECT P.NOMBRE AS NombreProveedor,P.NOMCONTACTO AS NombreContacto,P.TELEFONO AS Telefono, P.EMAILCONTACTO AS Email,M.NOMBRE AS NombreMunicipio,"
                + "PA.NOMBRE AS NombrePais FROM PROVEEDORES P LEFT JOIN MUNICIPIOS M ON P.CODIGOMUNICIPIO=M.CODIGO LEFT JOIN PAISES PA ON P.CODIGOPAIS=PA.CODIGO WHERE 1 = 1";
                
                //----------------------Configurar imagen para las columnas de detalles, eliminar y modificar ------------------------------
                
                URL imageEliminarURL = getClass().getResource("/recursos/eliminar.png");
                ImageIcon eliminarIcon = new ImageIcon(imageEliminarURL);
                //Ajustar tamaño de la imagen para la celda
                ImageIcon eliminarIconEscalado = new ImageIcon(eliminarIcon.getImage().getScaledInstance(23, 23, java.awt.Image.SCALE_SMOOTH));

                URL imageModificarURL = getClass().getResource("/recursos/modificar.png");
                ImageIcon modificarIcon = new ImageIcon(imageModificarURL);
                //Ajustar tamaño de la imagen para la celda
                ImageIcon modificarIconEscalado = new ImageIcon(modificarIcon.getImage().getScaledInstance(23, 23, java.awt.Image.SCALE_SMOOTH));
                
                //-------------------------------------------------------------------------------------------------------------------------
                
                
                // Obtener el índice de la columna en la que se hizo clic
                int column = tablaBusqueda.columnAtPoint(evt.getPoint());

                // Obtener el índice de la fila en la que se hizo clic
                int row = tablaBusqueda.rowAtPoint(evt.getPoint());
                
                // Obtener el índice de la columna de modificar (última columna), eliminar (penúltima columna), detalles (antepenúltima columna)
                int modificarColumna = tablaBusqueda.getColumnCount()-1;  
                int eliminarColumna = tablaBusqueda.getColumnCount() - 2; 
                
                    String codigoProveedorSeleccionado = "SELECT codigo FROM proveedores WHERE nombre = '" +  tablaBusqueda.getValueAt(row, 0) + "' "
                            + "AND nomcontacto = '" + tablaBusqueda.getValueAt(row, 1) + "'";
                int codigoProveedor = 0;
                try {
                    resul = stmt.executeQuery(codigoProveedorSeleccionado);
                    if(resul.next()){
                        codigoProveedor = resul.getInt("codigo");
                    }
                    } catch (SQLException ex) {
                        ex.printStackTrace();
                    }
                if (row < tablaBusqueda.getRowCount() && row >= 0 && column == eliminarColumna) {
                    int opcion = JOptionPane.showConfirmDialog(null, "¿Estás seguro de que quieres eliminar este proveedor?", "Confirmar eliminación", JOptionPane.YES_NO_OPTION);

                    if (opcion == JOptionPane.YES_OPTION) {
                        try {
                            String eliminarProveedor = "DELETE FROM proveedores WHERE codigo = '" + codigoProveedor + "'";
                            int filasAfectadas = stmt.executeUpdate(eliminarProveedor);

                            if (filasAfectadas > 0) {
                                JOptionPane.showMessageDialog(null, "Proveedor eliminado correctamente", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                            } else {
                                JOptionPane.showMessageDialog(null, "No se pudo eliminar el proveedor", "Error", JOptionPane.ERROR_MESSAGE);
                            }

                            // Luego, ejecutas la consulta para actualizar la tabla
                            ResultSet rs = stmt.executeQuery(sql);
                            DefaultTableModel model = (DefaultTableModel) tablaBusqueda.getModel();
                            model.setRowCount(0);

                            while (rs.next()) {
                                Object[] rowData = { rs.getString("NombreProveedor"), rs.getString("NombreContacto"), rs.getString("Telefono"), rs.getString("Email"),
                        rs.getString("NombreMunicipio"), rs.getString("NombrePais"), eliminarIconEscalado, modificarIconEscalado};
                                model.addRow(rowData);
                            }

                            rs.close();
                            stmt.close();
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }
                    }
                }

                if (row < tablaBusqueda.getRowCount() && row >= 0 && column == modificarColumna) {
                        VentanaModificarProveedor vm = new VentanaModificarProveedor(VentanaPrincipal.this,true, VentanaPrincipal.this);
                        vm.rellenarDatos(codigoProveedor);
                        vm.setVisible(true);
                }
            }
        };
        
        //Activar el listener en la jTable
        tablaBusqueda.addMouseListener(mouseClickListener);
    }
    
    
    
    
    
    public void buscarProveedor(int codigoPais, int codigoMunicipio) {
        
       
        
       System.out.println("codigo pais: " +codigoPais);
        System.out.println("codigo municipio: " +codigoMunicipio);
        String sql = "SELECT P.NOMBRE AS NombreProveedor,P.NOMCONTACTO AS NombreContacto,P.TELEFONO AS Telefono, P.EMAILCONTACTO AS Email,M.NOMBRE AS NombreMunicipio,"
                + "PA.NOMBRE AS NombrePais FROM PROVEEDORES P LEFT JOIN MUNICIPIOS M ON P.CODIGOMUNICIPIO=M.CODIGO LEFT JOIN PAISES PA ON P.CODIGOPAIS=PA.CODIGO WHERE 1 = 1";

        // Verificar si los campos están vacios
        if (codigoMunicipio != -1) {
            sql += " AND P.CODIGOMUNICIPIO = " + codigoMunicipio;
            
        }

        if (codigoPais != -1) {
            sql += " AND P.CODIGOPAIS =  " + codigoPais;
        }

        // Ejecuta la consulta y actualiza la tabla
        try {
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(sql);

            DefaultTableModel model = (DefaultTableModel) tablaBusqueda.getModel();
           
                
            //--------------------------------------------------------------------------------------------------------------------------
            if (!rs.isBeforeFirst()) {
                // No hay resultados, muestra un JOptionPane y retorna
                JOptionPane.showMessageDialog(null, "No hay resultados para tu búsqueda", "Sin resultados", JOptionPane.INFORMATION_MESSAGE);
            }
            else{
                 model.setRowCount(0);
            
                //----------------------Configurar imagen para las columnas de detalles, eliminar y modificar ------------------------------

                URL imageEliminarURL = getClass().getResource("/recursos/eliminar.png");
                ImageIcon eliminarIcon = new ImageIcon(imageEliminarURL);
                //Ajustar tamaño de la imagen para la celda
                ImageIcon eliminarIconEscalado = new ImageIcon(eliminarIcon.getImage().getScaledInstance(23, 23, java.awt.Image.SCALE_SMOOTH));

                

                URL imageModificarURL = getClass().getResource("/recursos/modificar.png");
                ImageIcon modificarIcon = new ImageIcon(imageModificarURL);
                //Ajustar tamaño de la imagen para la celda
                ImageIcon modificarIconEscalado = new ImageIcon(modificarIcon.getImage().getScaledInstance(23, 23, java.awt.Image.SCALE_SMOOTH));
                while (rs.next()) {
                Object[] row = { rs.getString("NombreProveedor"), rs.getString("NombreContacto"), rs.getString("Telefono"), rs.getString("Email"),
                        rs.getString("NombreMunicipio"), rs.getString("NombrePais"), eliminarIconEscalado, modificarIconEscalado};
                model.addRow(row);
                
                }
            }
            rs.close();
            stmt.close();
            
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    
    

    
    
    
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grupoApariencia = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaBusqueda = new javax.swing.JTable();
        panelAcciones = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuAcciones = new javax.swing.JMenu();
        menuProveedores = new javax.swing.JMenu();
        menuBuscarProveedores = new javax.swing.JMenuItem();
        menuAnadirProveedores = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        menuItemProductos = new javax.swing.JMenuItem();
        menuApariencia = new javax.swing.JMenu();
        menuDarkMode = new javax.swing.JCheckBoxMenuItem();
        menuModoClaro = new javax.swing.JCheckBoxMenuItem();
        menuModoLectura = new javax.swing.JCheckBoxMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        menuModoAzulado = new javax.swing.JCheckBoxMenuItem();
        menuModoNord = new javax.swing.JCheckBoxMenuItem();
        menuModoCyan = new javax.swing.JCheckBoxMenuItem();
        menuModoTurquesa = new javax.swing.JCheckBoxMenuItem();
        menuModoMorado = new javax.swing.JCheckBoxMenuItem();
        menuAyuda = new javax.swing.JMenu();
        menuVerAyuda = new javax.swing.JMenuItem();
        menuExit = new javax.swing.JMenu();
        menuCerrarSesion = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        menuExitApp = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Buscar y filtrar proveedores");
        setIconImage(getIconImage());
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tablaBusqueda.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablaBusqueda.setToolTipText("");
        jScrollPane1.setViewportView(tablaBusqueda);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1110, 280));

        panelAcciones.setPreferredSize(new java.awt.Dimension(1090, 410));

        javax.swing.GroupLayout panelAccionesLayout = new javax.swing.GroupLayout(panelAcciones);
        panelAcciones.setLayout(panelAccionesLayout);
        panelAccionesLayout.setHorizontalGroup(
            panelAccionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1090, Short.MAX_VALUE)
        );
        panelAccionesLayout.setVerticalGroup(
            panelAccionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 410, Short.MAX_VALUE)
        );

        getContentPane().add(panelAcciones, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 290, 1090, 410));

        menuAcciones.setText("Acciones");

        menuProveedores.setText("Proveedores");

        menuBuscarProveedores.setText("Buscar/filtrar");
        menuBuscarProveedores.setToolTipText("");
        menuBuscarProveedores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuBuscarProveedoresActionPerformed(evt);
            }
        });
        menuProveedores.add(menuBuscarProveedores);

        menuAnadirProveedores.setText("Añadir");
        menuAnadirProveedores.setToolTipText("");
        menuAnadirProveedores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAnadirProveedoresActionPerformed(evt);
            }
        });
        menuProveedores.add(menuAnadirProveedores);

        menuAcciones.add(menuProveedores);

        jMenuBar1.add(menuAcciones);

        jMenu1.setText("Informes");

        menuItemProductos.setText("Productos");
        menuItemProductos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemProductosActionPerformed(evt);
            }
        });
        jMenu1.add(menuItemProductos);

        jMenuBar1.add(jMenu1);

        menuApariencia.setText("Apariencia");

        grupoApariencia.add(menuDarkMode);
        menuDarkMode.setText("Modo oscuro");
        menuDarkMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuDarkModeActionPerformed(evt);
            }
        });
        menuApariencia.add(menuDarkMode);

        grupoApariencia.add(menuModoClaro);
        menuModoClaro.setText("Modo claro");
        menuModoClaro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuModoClaroActionPerformed(evt);
            }
        });
        menuApariencia.add(menuModoClaro);

        grupoApariencia.add(menuModoLectura);
        menuModoLectura.setText("Modo lectura");
        menuModoLectura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuModoLecturaActionPerformed(evt);
            }
        });
        menuApariencia.add(menuModoLectura);
        menuApariencia.add(jSeparator2);

        grupoApariencia.add(menuModoAzulado);
        menuModoAzulado.setText("Azul");
        menuModoAzulado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuModoAzuladoActionPerformed(evt);
            }
        });
        menuApariencia.add(menuModoAzulado);

        grupoApariencia.add(menuModoNord);
        menuModoNord.setSelected(true);
        menuModoNord.setText("Nord");
        menuModoNord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuModoNordActionPerformed(evt);
            }
        });
        menuApariencia.add(menuModoNord);

        grupoApariencia.add(menuModoCyan);
        menuModoCyan.setText("Cyan claro");
        menuModoCyan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuModoCyanActionPerformed(evt);
            }
        });
        menuApariencia.add(menuModoCyan);

        grupoApariencia.add(menuModoTurquesa);
        menuModoTurquesa.setText("Turquesa");
        menuModoTurquesa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuModoTurquesaActionPerformed(evt);
            }
        });
        menuApariencia.add(menuModoTurquesa);

        grupoApariencia.add(menuModoMorado);
        menuModoMorado.setText("Morado Oscuro");
        menuModoMorado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuModoMoradoActionPerformed(evt);
            }
        });
        menuApariencia.add(menuModoMorado);

        jMenuBar1.add(menuApariencia);

        menuAyuda.setText("Ayuda");
        menuAyuda.setToolTipText("");

        menuVerAyuda.setText("Ver ayuda");
        menuVerAyuda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuVerAyudaActionPerformed(evt);
            }
        });
        menuAyuda.add(menuVerAyuda);

        jMenuBar1.add(menuAyuda);

        menuExit.setText("Salir");

        menuCerrarSesion.setText("Cerrar sesión");
        menuCerrarSesion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCerrarSesionActionPerformed(evt);
            }
        });
        menuExit.add(menuCerrarSesion);
        menuExit.add(jSeparator1);

        menuExitApp.setText("Salir de la aplicación");
        menuExitApp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuExitAppActionPerformed(evt);
            }
        });
        menuExit.add(menuExitApp);

        jMenuBar1.add(menuExit);

        setJMenuBar(jMenuBar1);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void menuExitAppActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuExitAppActionPerformed
        
        int opcion = JOptionPane.showConfirmDialog(null, "¿Seguro que quieres salir de la aplicacion?", "Confirmar salida", JOptionPane.YES_NO_OPTION);
        
        if (opcion == JOptionPane.YES_OPTION) {
            //Cerrar la conexión
            try {
                con.close();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
            // Cerrar aplicación
            System.exit(0);
        }
        
    }//GEN-LAST:event_menuExitAppActionPerformed

    private void menuBuscarProveedoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuBuscarProveedoresActionPerformed
        this.setTitle("Buscar y filtrar proveedores");
        tablaBusqueda.removeMouseListener(mouseClickListener);
        mouseClickListener = null;
        //Borra lo que hay en el panel y añade el Panel de buscar
        panelAcciones.removeAll();
        cargarTablaBuscar();
        PanelBuscarProveedor pb = new PanelBuscarProveedor(this);
        panelAcciones.setLayout(new BorderLayout());
        panelAcciones.add(pb, BorderLayout.CENTER);
        panelAcciones.add(pb);
        panelAcciones.revalidate();
        panelAcciones.repaint();
        
    }//GEN-LAST:event_menuBuscarProveedoresActionPerformed

    private void menuAnadirProveedoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAnadirProveedoresActionPerformed
       this.setTitle("Añadir proveedor");
       tablaBusqueda.removeMouseListener(mouseClickListener);
        mouseClickListener = null;
        //Borra lo que hay en el panel y añade el Panel de añadir
        panelAcciones.removeAll();
        cargarTablaAnadir();
        PanelAnadirProveedor pa = new PanelAnadirProveedor(this);
        panelAcciones.setLayout(new BorderLayout());
        panelAcciones.add(pa, BorderLayout.CENTER);
        panelAcciones.add(pa);
        panelAcciones.revalidate();
        panelAcciones.repaint();
    }//GEN-LAST:event_menuAnadirProveedoresActionPerformed

    private void menuCerrarSesionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCerrarSesionActionPerformed
        int opcion = JOptionPane.showConfirmDialog(null, "¿Seguro que quieres cerrar sesión?", "Confirmar", JOptionPane.YES_NO_OPTION);
        
        if (opcion == JOptionPane.YES_OPTION) {
           dispose();
           Login vs = new Login();
           vs.setVisible(true);
        }
    }//GEN-LAST:event_menuCerrarSesionActionPerformed

    private void menuDarkModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuDarkModeActionPerformed
             EventQueue.invokeLater(new Runnable(){
                @Override
                public void run(){
                    FlatDarculaLaf.setup();
                    FlatLaf.updateUI();
            }
            });
      
    }//GEN-LAST:event_menuDarkModeActionPerformed

    private void menuModoClaroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuModoClaroActionPerformed
        EventQueue.invokeLater(new Runnable(){
                @Override
                public void run(){
                    FlatIntelliJLaf.setup();
                    FlatLaf.updateUI();
            }
            });
    }//GEN-LAST:event_menuModoClaroActionPerformed

    private void menuModoMoradoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuModoMoradoActionPerformed
        EventQueue.invokeLater(new Runnable(){
                @Override
                public void run(){
                    FlatDarkPurpleIJTheme.setup();
                    FlatLaf.updateUI();
            }
            });
    }//GEN-LAST:event_menuModoMoradoActionPerformed

    private void menuModoTurquesaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuModoTurquesaActionPerformed
       EventQueue.invokeLater(new Runnable(){
                @Override
                public void run(){
                    FlatSolarizedDarkIJTheme.setup();
                    FlatLaf.updateUI();
            }
            });
    }//GEN-LAST:event_menuModoTurquesaActionPerformed

    private void menuModoLecturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuModoLecturaActionPerformed
        EventQueue.invokeLater(new Runnable(){
                @Override
                public void run(){
                    FlatSolarizedLightIJTheme.setup();
                    FlatLaf.updateUI();
            }
            });
    }//GEN-LAST:event_menuModoLecturaActionPerformed

    private void menuModoAzuladoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuModoAzuladoActionPerformed
        EventQueue.invokeLater(new Runnable(){
                @Override
                public void run(){
                    FlatGradiantoDeepOceanIJTheme.setup();
                    FlatLaf.updateUI();
            }
            });
    }//GEN-LAST:event_menuModoAzuladoActionPerformed

    private void menuModoNordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuModoNordActionPerformed
        EventQueue.invokeLater(new Runnable(){
                @Override
                public void run(){
                    FlatNordIJTheme.setup();
                    FlatLaf.updateUI();
            }
            });
    }//GEN-LAST:event_menuModoNordActionPerformed

    private void menuModoCyanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuModoCyanActionPerformed
        EventQueue.invokeLater(new Runnable(){
                @Override
                public void run(){
                    FlatCyanLightIJTheme.setup();
                    FlatLaf.updateUI();
            }
            });
    }//GEN-LAST:event_menuModoCyanActionPerformed

    private void menuItemProductosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemProductosActionPerformed
        this.setTitle("Generaciión de informes");
        tablaBusqueda.removeMouseListener(mouseClickListener);
        mouseClickListener = null;
        //Borra lo que hay en el panel y añade el Panel de buscar
        panelAcciones.removeAll();
        cargarTablaProductos();
        PanelBuscarProducto pb = new PanelBuscarProducto(this, tablaBusqueda);
        panelAcciones.setLayout(new BorderLayout());
        panelAcciones.add(pb, BorderLayout.CENTER);
        panelAcciones.add(pb);
        panelAcciones.revalidate();
        panelAcciones.repaint();
    }//GEN-LAST:event_menuItemProductosActionPerformed

    private void menuVerAyudaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuVerAyudaActionPerformed
       
    }//GEN-LAST:event_menuVerAyudaActionPerformed
    
    
     public static void setUIFont(FontUIResource f) {
        Enumeration<Object> keys = UIManager.getDefaults().keys();
        while (keys.hasMoreElements()) {
            Object key = keys.nextElement();
            Object value = UIManager.get(key);
            if (value instanceof FontUIResource) {
                UIManager.put(key, f);
            }
        }
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
       
        
         
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaPrincipal().setVisible(true);
               
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup grupoApariencia;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JMenu menuAcciones;
    private javax.swing.JMenuItem menuAnadirProveedores;
    private javax.swing.JMenu menuApariencia;
    private javax.swing.JMenu menuAyuda;
    private javax.swing.JMenuItem menuBuscarProveedores;
    private javax.swing.JMenuItem menuCerrarSesion;
    private javax.swing.JCheckBoxMenuItem menuDarkMode;
    private javax.swing.JMenu menuExit;
    private javax.swing.JMenuItem menuExitApp;
    private javax.swing.JMenuItem menuItemProductos;
    private javax.swing.JCheckBoxMenuItem menuModoAzulado;
    private javax.swing.JCheckBoxMenuItem menuModoClaro;
    private javax.swing.JCheckBoxMenuItem menuModoCyan;
    private javax.swing.JCheckBoxMenuItem menuModoLectura;
    private javax.swing.JCheckBoxMenuItem menuModoMorado;
    private javax.swing.JCheckBoxMenuItem menuModoNord;
    private javax.swing.JCheckBoxMenuItem menuModoTurquesa;
    private javax.swing.JMenu menuProveedores;
    private javax.swing.JMenuItem menuVerAyuda;
    private javax.swing.JPanel panelAcciones;
    private javax.swing.JTable tablaBusqueda;
    // End of variables declaration//GEN-END:variables
}
